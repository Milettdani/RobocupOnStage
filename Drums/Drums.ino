#include <FastLED.h>
void(* resetFunc) (void) = 0;
const byte solenoids[8] = {A0, A2, A3, A4, A5, 11, 12};
const static byte dirPin = 6, stepPin = 7, enPin = 5;
const static byte NUM_LEDS = 16, LED_PIN = 5; CRGB leds[NUM_LEDS];
const byte ledRemap[8] = {4, 3, 0, 1, 5, 2, 6};

//S
short d[700] = {128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 137, 137, 137, 137, 137, 137, 137, 137, 141, 128, 128, 128, 128, 128, 128, 128, 134, 128, 146, 132, 134, 128, 146, 128, 134, 128, 146, 132, 134, 128, 146, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 144, 130, 132, 150, 128, 128, 128, 128, 128, 144, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 130, 128, 150, 132, 130, 128, 150, 132, 134, 128, 146, 132, 134, 128, 146, 128, 134, 128, 146, 132, 134, 128, 146, 128, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 130, 132, 150, 132, 130, 132, 146, 132, 130, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 146, 132, 148, 128, 132, 128, 148, 128, 132, 128, 148, 132, 132, 128, 148, 128, 132, 128, 148, 132, 132, 128, 148, 132, 132, 128, 144, 132, 132, 128, 148, 132, 132, 128, 148, 128, 132, 128, 144, 128, 132, 132, 148, 128, 132, 128, 148, 128, 132, 132, 148, 132, 132, 128, 148, 132, 132, 128, 144, 132, 128, 128, 144, 132, 134, 128, 148, 128, 134, 128, 150, 128, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 150, 132, 134, 128, 152, 132, 148, 144, 148, 132, 150, 128, 128, 128, 128, 128, 144, 128, 134, 128, 146, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 150, 128, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 134, 128, 146, 132, 140, 128, 144, 132, 148, 128, 148, 128, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 148, 128, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 148, 128, 132, 128, 144, 132, 132, 132, 144, 132, 132, 128, 144, 132, 132, 132, 148, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 128, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 148, 128, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 132, 144, 132, 132, 128, 148, 128, 132, 132, 144, 132, 132, 128, 144, 132, 132, 132, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 132, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 148, 128, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128, 144, 132, 132, 132, 144, 132, 132, 132, 144, 132, 132, 132, 144, 132, 132, 132, 144, 132, 132, 128, 148, 128, 132, 128, 144, 132, 132, 128, 144, 132, 132, 128};
short arrSize = 700;
float arrayTime = 0.250000;

//ENDMARK

int dig(long val, int n)
{
  String g = String(val);
  return String(g[n+1]).toInt();
  /*
  if (n >= 8 - g.length()) return String(g[n - (8-g.length())]).toInt();
  else return 0;*/
}

long toDec(int dec)
{
  String b2 = "";
  while (dec > 0) {
    if(dec%2 == 0) b2 += "0";
    else b2 += "1";
    dec >>= 1;
  }

  String b3 = "";
  for (int i = b2.length()-1; i>=0; i--) {
    b3 += String(b2[i]);
  }
  //Serial.println(b3);
  //Serial.println((long)b3.toInt());
  //Serial.println("\n");
  return b3.toInt();
}

void play()
{
  bool playing = false;
  while (!playing) {
    while (Serial.available() > 0) {
      byte data = Serial.read();
      if(data == 'A') playing = true;
    }
  }
  for (int counter = 0; counter < arrSize; counter++) {
    while(Serial.available() > 0) {
      byte data = Serial.read();
      if(data == 'B') break;
    }

    if (counter >= arrSize) return;
    Serial.println();
    Serial.print(counter);
    Serial.print("    ");
    bool keyArray[7];
    for (int i = 0; i<7; i++) {
      keyArray[i] = dig(toDec(d[counter]), i);
      digitalWrite(solenoids[i], keyArray[i]);
      Serial.print(keyArray[i]);
    }

    for (int i = 0; i<7; i++) {
      leds[ledRemap[i]*2] = keyArray[i] ? CRGB::Red : CRGB::Black;
      leds[ledRemap[i]*2 +1] = keyArray[i] ? CRGB::Red : CRGB::Black;
    }
    FastLED.show();

    while (millis() < arrayTime*1000*(counter+1));
  }
  resetFunc();
}

void setup()
{
  Serial.begin(115200);
  for (byte solenoid : solenoids) {
    pinMode(solenoid, OUTPUT);
    digitalWrite(solenoid, LOW);
  }
  FastLED.addLeds<WS2812, LED_PIN, BRG>(leds, NUM_LEDS);
  FastLED.setBrightness(64);
  FastLED.setMaxPowerInVoltsAndMilliamps(5, 500);
  FastLED.clear();
  FastLED.show();
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.print('D');
  play();
}

void loop()
{
}